@startuml

title __CFTREE's Class Diagram__\n

  namespace methods.mbirch {
    namespace cftree {
      class methods.mbirch.cftree.CFEntry {
          {static} - LINE_SEP : String
          - child : CFNode
          - clusterEntry : ArrayList<DigitalObject>
          - indexList : ArrayList<Integer>
          - medoid : DigitalObject
          - n : int
          - subclusterID : int
          + CFEntry()
          + CFEntry()
          + CFEntry()
          + CFEntry()
          + equals()
          + toString()
          # addToChild()
          # distance()
          # getChild()
          # getChildSize()
          # getClusterEntry()
          # getIndexList()
          # getMedoid()
          # getSubclusterID()
          # hasChild()
          # isWithinThreshold()
          # setChild()
          # setSubclusterID()
          # update()
      }
    }
  }
  

  namespace methods.mbirch {
    namespace cftree {
      class methods.mbirch.cftree.CFEntryPair {
          + e1 : CFEntry
          + e2 : CFEntry
          {static} - LINE_SEP : String
          + CFEntryPair()
          + CFEntryPair()
          + equals()
          + toString()
      }
    }
  }
  

  namespace methods.mbirch {
    namespace cftree {
      class methods.mbirch.cftree.CFNode {
          {static} - LINE_SEP : String
          - applyMergingRefinement : boolean
          - distThreshold : double
          - entries : ArrayList<CFEntry>
          - fm : FeatureManager
          - leafStatus : boolean
          - maxNodeEntries : int
          + CFNode()
          + applyMergingRefinement()
          + getDistFunction()
          + getDistThreshold()
          + getMaxNodeEntries()
          + insertEntry()
          + isDummy()
          + isLeaf()
          + mapToClosestSubcluster()
          + mergingRefinement()
          + size()
          + splitEntry()
          + toString()
          # addToEntryList()
          # countChildrenNodes()
          # countEntriesInChildrenNodes()
          # findClosestEntry()
          # findClosestEntryPair()
          # findFarthestEntryPair()
          # getEntries()
          # getNextLeaf()
          # getPreviousLeaf()
          # redistributeEntries()
          # redistributeEntries()
          # redistributeEntries()
          # setLeafStatus()
          # setNextLeaf()
          # setPreviousLeaf()
          - replaceClosestPairWithNewEntries()
          - replaceClosestPairWithNewMergedEntry()
          - replaceEntries()
          - resetEntries()
      }
    }
  }
  

  namespace methods.mbirch {
    namespace cftree {
      class methods.mbirch.cftree.CFTree {
          {static} + D0_DIST : int
          {static} + D1_DIST : int
          {static} + D2_DIST : int
          {static} + D3_DIST : int
          {static} + D4_DIST : int
          {static} - MEM_LIM_FRAC : double
          - automaticRebuild : boolean
          - fm : FeatureManager
          - instanceIndex : int
          - leafListStart : CFNode
          - memLimit : long
          - periodicMemLimitCheck : long
          - root : CFNode
          + CFTree()
          + computeNewThreshold()
          + computeSumLambdaSquared()
          + countEntries()
          + countLeafEntries()
          + countNodes()
          + finishedInsertingData()
          + getLeafListStart()
          + getMemoryLimit()
          + getSubclusterMembers()
          + insertEntry()
          + insertEntry()
          + mapToClosestSubcluster()
          + printCFTree()
          + printLeafEntries()
          + printLeafIndexes()
          + rebuildTree()
          + setAutomaticRebuild()
          + setMemoryLimit()
          + setMemoryLimitMB()
          + setPeriodicMemLimitCheck()
          - computeMemorySize()
          - copyTree()
          - hasReachedMemoryLimit()
          - insertEntry()
          - rebuildIfAboveMemLimit()
          - splitRoot()
      }
    }
  }
  

  namespace methods.mbirch {
    namespace cftree {
      class methods.mbirch.cftree.SizeOf {
          {static} - SKIP_FINAL_FIELD : boolean
          {static} - SKIP_STATIC_FIELD : boolean
          {static} - inst : Instrumentation
          {static} - unit : String[]
          {static} + humanReadable()
          {static} + iterativeSizeOf()
          {static} + premain()
          {static} + sizeOf()
          {static} - isAPrimitiveType()
          {static} - isComputable()
          {static} - iterativeSizeOf()
      }
    }
  }
  

  methods.mbirch.cftree.CFNode o-- methods.mbirch.cftree.CFNode : nextLeaf
  methods.mbirch.cftree.CFNode o-- methods.mbirch.cftree.CFNode : previousLeaf


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
